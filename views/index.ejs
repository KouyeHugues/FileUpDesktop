<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css//style.css">
    <title>FileUp</title>
     <!-- Bootstrap core CSS -->
    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="app">
        <div class="screen join-screen active">
            <div class="form">
                <h2>Share your files securely</h2>
                <div class="form-input">
                    <button id="sender-start-con-btn">Create room</button>
                </div>
                <div class="form-input" id="join-id">
                    <!-- <b>Room ID</b>
                    <span>000-000-000</span> -->
                </div>
            </div>
        </div>
        <div class="screen fs-screen">
            <div class="file-input">
                <label for="file-input">
                    Click here to select files for sharing
                </label>
                <input type="file" id="file-input">
            </div>
            <div class="files-list">
                <div class="title">Shared files:</div>
            </div>
        </div>
    </div>
</div>
    
     <!-- Bootstrap core JavaScript -->
  <script src="jquery/jquery.min.js"></script>
  <script src="bootstrap/js/bootstrap.bundle.min.js"></script>
    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/downloadjs/1.4.1/download.min.js"></script> -->
    <script src="/socket.io/socket.io.js"></script>
    <!-- <script type="text/javascript" src="javascipts/index.js"></script> -->
    <script>
(function(){
    let receiverID;
    const socket = io();

    function generateID (){
        return `${Math.trunc(Math.random()*999)}-${Math.trunc(Math.random()*999)}-${Math.trunc(Math.random()*999)}`
    }

    document.querySelector('#sender-start-con-btn').addEventListener('click', ()=>{
        let joinID = generateID();
        document.querySelector('#join-id').innerHTML = `<b>Room ID</b>
        <span>${joinID}</span>`;
        
        socket.emit('sender-join', {
            uid:joinID
        });
    }); 

    socket.on('init', (uid)=>{
        receiverID = uid;
        document.querySelector('.join-screen').classList.remove('active');
        document.querySelector('.fs-screen').classList.add('active');
    });

    document.querySelector('#file-input').addEventListener('change', (e)=>{
        let file = e.target.files[0];
        if(!file){
            return;
        }
        let reader = new FileReader();
        reader.onload = (e)=>{
            let buffer = new Uint8Array(reader.result);
            let el = document.createElement('div');
            el.classList.add('item');
            el.innerHTML = 
                `<div class="progress">0%</div>
                <div class="filename">${file.name}</div>`;
        
        document.querySelector('.files-list').appendChild(el);
        shareFile({
            filename:file.name,
            total_buffer_size:buffer.length,
            buffer_size:1024
        }, buffer, el.querySelector('.progress'));
        }
        reader.readAsArrayBuffer(file);
    });

    function shareFile(metadata, buffer, progress_node){
        socket.emit('file-meta', {
            uid:receiverID,
            metadata:metadata
        });
        socket.on('fs-share', ()=>{
            let chunk = buffer.slice(0, metadata.buffer_size);
            buffer = buffer.slice(metadata.buffer_size, buffer.length);
            progress_node.innerText = Math.trunc((metadata.total_buffer_size - buffer.length) / metadata.total_buffer_size *100) + '%';
            if(chunk.length != 0){
                socket.emit('file-raw',{
                    uid:receiverID,
                    buffer:chunk
                });
            }
        })
    }
})();
    </script>
</body>
</html>