<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="bootstrap/css//style.css">
    <title>FileUp</title>
    <!-- Bootstrap core CSS -->
    <link href="bootstrap/css/bootstrap.min.css" rel="stylesheet">
</head>
<body> 
        <div class="screen join-screen active">
            <div class="form">
                <h2>Share your files securely</h2>
                <div class="form-input">
                    <label for="join-id">Join ID</label>
                    <input type="text" id="join-id">
                </div>
                <div class="form-input">
                    <button id="receiver-start-con-btn">Connect</button>
                </div>
            </div>
        </div>
        <div class="screen fs-screen">
            <div class="files-list">
                <div class="title">Shared files:</div>
            </div>
        </div>
    </div>

     <!-- Bootstrap core JavaScript -->
  <script src="jquery/jquery.min.js"></script>
  <script src="bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/downloadjs/1.4.1/download.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        
(function(){

    let senderID;
    const socket = io();

    function generateID (){
        return `${Math.trunc(Math.random()*999)}-${Math.trunc(Math.random()*999)}-${Math.trunc(Math.random()*999)}`
    }

    document.querySelector('#receiver-start-con-btn').addEventListener('click', ()=>{
        senderID = document.querySelector('#join-id').value;
        if(senderID.length == 0){
            return;
        }
        let joinID = generateID();
        socket.emit('receiver-join', {
            uid:joinID,
            sender_uid:senderID
        });
        document.querySelector('.join-screen').classList.remove('active');
        document.querySelector('.fs-screen').classList.add('active');
    });
    let fileShare = {};

    socket.on('fs-meta', (metadata)=>{
        fileShare.metadata = metadata;
        fileShare.transmitted = 0;
        fileShare.buffer =[];

        let el = document.createElement('div');
        el.classList.add('item');
        el.innerHTML = `<div class="progress">0%</div>
        <div class="filename">${metadata.filename}</div>`
    
        document.querySelector('.files-list').appendChild(el);

        fileShare.progress_node = el.querySelector('.progress');

        socket.emit('fs-start', {
            uid: senderID
        });
    });

    socket.on('fs-share', (buffer)=>{
        fileShare.buffer.push(buffer);
        fileShare.transmitted += buffer.byteLength;
        fileShare.progress_node.innerText = Math.trunc(fileShare.transmitted / fileShare.metadata.total_buffer_size * 100) + '%';
        if(fileShare.transmitted == fileShare.metadata.total_buffer_size){
            download(new Blob(fileShare.buffer), fileShare.metadata.filename);
            fileShare ={};  
        } else{
            socket.emit('fs-start', {
                uid:senderID
            });
        }
    });
})();
    </script>
</body>
</html>